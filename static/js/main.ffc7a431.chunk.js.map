{"version":3,"sources":["logo.svg","config/Context.jsx","providers/ContextProvider.jsx","components/List.jsx","components/Age.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AppContext","React","createContext","AppContextProvider","props","_useState","useState","name","age","_useState2","Object","slicedToArray","list","setList","react_default","a","createElement","Context","Provider","value","children","List","_useContext","useContext","length","map","item","key","concat","onClick","num","addObj","push","Age","slice","App","ContextProvider","List_List","Age_Age","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kMCIzBC,EAHIC,IAAMC,cAAc,IC6BxBC,EAxBY,SAACC,GAAU,IAAAC,EAOZC,mBAAS,CAChC,CAACC,KAAK,OAAQC,IAAI,IAClB,CAACD,KAAK,OAAQC,IAAI,MATiBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GAO7BO,EAP6BH,EAAA,GAOvBI,EAPuBJ,EAAA,GAcpC,OACEK,EAAAC,EAAAC,cAACC,EAAWC,SAAZ,CAAqBC,MAAO,CAACP,OAAMC,YAChCT,EAAMgB,WChBAC,EAAO,WAAM,IAAAC,EAEEC,qBAAWvB,GAA7BY,EAFgBU,EAEhBV,KAAMC,EAFUS,EAEVT,QAgBd,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBAAgBJ,EAAKY,QACrBV,EAAAC,EAAAC,cAAA,UAEIJ,EAAKa,IAAI,SAAAC,GACP,OAAQZ,EAAAC,EAAAC,cAAA,MAAIW,IAAG,QAAAC,OAAUF,EAAKnB,OAASmB,EAAKnB,SAIlDO,EAAAC,EAAAC,cAAA,UAAQa,QAvBQ,WACnB,IAAMC,EAAMlB,EAAKY,OAAS,EACpBO,EAAS,CACdxB,KAAI,OAAAqB,OAAQE,GACZtB,IAAIsB,GAGLlB,EAAKoB,KAAKD,GAEVlB,EAAQD,KAcL,YC5BOqB,EAAM,WAAM,IAAAX,EAEGC,qBAAWvB,GAA7BY,EAFeU,EAEfV,KAAMC,EAFSS,EAETT,QASd,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBAAeJ,EAAKY,QACpBV,EAAAC,EAAAC,cAAA,UAEIJ,EAAKa,IAAI,SAAAC,GACP,OAAQZ,EAAAC,EAAAC,cAAA,MAAIW,IAAG,OAAAC,OAASF,EAAKlB,MAAQkB,EAAKlB,QAIhDM,EAAAC,EAAAC,cAAA,UAAQa,QAhBU,WACpBhB,EAAQD,EAAKsB,MAAM,GAAI,MAerB,mBCKSC,mLAjBX,OACErB,EAAAC,EAAAC,cAAA,WAGEF,EAAAC,EAAAC,cAACoB,EAAD,KAGEtB,EAAAC,EAAAC,cAACqB,EAAD,MAGAvB,EAAAC,EAAAC,cAACsB,EAAD,eAZQC,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ffc7a431.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nconst AppContext = React.createContext({});\n\n\nexport default AppContext;","import React, { Component, createContext, useState } from \"react\";\nimport AppContext from '../config/Context';\n\n\n\n\nconst AppContextProvider = (props) => {\n  // const list = [\n  // \t{name:'A001', age:11}, \n  // \t{name:'B001', age:21}\n  // ];\n\n\n  const [list, setList] = useState([\n  \t{name:'A001', age:11}, \n  \t{name:'B001', age:21}\n  ])\n\n\n\n  return (\n    <AppContext.Provider value={{list, setList}}>\n      {props.children}\n    </AppContext.Provider>\n  );\n\n}\n\n \n\nexport default AppContextProvider;","import React, { Component, useContext } from \"react\";\nimport AppContext from '../config/Context.jsx' ;\n\n\n\n\nexport const List = () => {\n  // share same data from AppContext\n  const { list, setList } = useContext(AppContext) \n\n  //add a row \n  const addListName = () => { \n  \tconst num = list.length + 1;\n  \tconst addObj = {\n  \t\tname:`add-${num}`,\n  \t\tage:num\n  \t}\n \n  \tlist.push(addObj)\n \n  \tsetList(list)\n  }\n\n\n  return(\n    <div>\n      <h1>List Comp: {list.length}</h1>\n      <ol>\n        {\n          list.map(item => {  \n            return (<li key={`name-${item.name}`}>{item.name}</li>)\n          })\n        }\n      </ol>\n      <button onClick={addListName}>AddObj</button>\n    </div>\n    \n  )\n   \n}\n","import React, { Component, useContext } from \"react\";\nimport AppContext from '../config/Context.jsx' ;\n\n\n\n\nexport const Age = () => {\n  // share same data from AppContext\n  const { list, setList } = useContext(AppContext);\n\n  //remove last one \n  const removeLastOne = () => {  \n    setList(list.slice(0, -1))\n  }\n\n\n\n  return(\n    <div>\n      <h1>Age Comp: {list.length}</h1>\n      <ol>\n        {\n          list.map(item => {  \n            return (<li key={`age-${item.age}`}>{item.age}</li>)\n          })\n        }\n      </ol>\n      <button onClick={removeLastOne}>removeLastOne</button>\n    </div>\n    \n  )\n   \n}\n","import React, { Component, useContext } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport AppContextProvider from \"./providers/ContextProvider\"; \nimport { List } from './components/List.jsx';\nimport { Age } from './components/Age.jsx';\n\n \n\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n\n        {/* App Context Provider */}\n        <AppContextProvider> \n\n          {/* List Comp */}\n          <List />\n\n          {/* Age Comp */}\n          <Age />       \n        </AppContextProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}